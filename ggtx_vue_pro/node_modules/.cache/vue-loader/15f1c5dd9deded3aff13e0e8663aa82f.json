{"remainingRequest":"E:\\project\\ggtx_vue_pro\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\project\\ggtx_vue_pro\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\ggtx_vue_pro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\ggtx_vue_pro\\src\\views\\Register.vue?vue&type=template&id=63ae9146&scoped=true&","dependencies":[{"path":"E:\\project\\ggtx_vue_pro\\src\\views\\Register.vue","mtime":1602079229378},{"path":"E:\\project\\ggtx_vue_pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\project\\ggtx_vue_pro\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\project\\ggtx_vue_pro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\project\\ggtx_vue_pro\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}